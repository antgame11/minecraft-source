/*
 * Decompiled with CFR 0.2.2 (FabricMC 7c48b8c4).
 */
package net.minecraft.server.dedicated.management;

import com.mojang.serialization.Codec;
import net.minecraft.registry.Registry;
import net.minecraft.server.dedicated.management.IncomingRpcMethod;
import net.minecraft.server.dedicated.management.RpcDiscover;
import net.minecraft.server.dedicated.management.RpcPlayer;
import net.minecraft.server.dedicated.management.RpcRequestParameter;
import net.minecraft.server.dedicated.management.RpcResponseResult;
import net.minecraft.server.dedicated.management.dispatch.AllowlistRpcDispatcher;
import net.minecraft.server.dedicated.management.dispatch.GameRuleRpcDispatcher;
import net.minecraft.server.dedicated.management.dispatch.IpBansRpcDispatcher;
import net.minecraft.server.dedicated.management.dispatch.OperatorsRpcDispatcher;
import net.minecraft.server.dedicated.management.dispatch.PlayerBansRpcDispatcher;
import net.minecraft.server.dedicated.management.dispatch.PlayersRpcDispatcher;
import net.minecraft.server.dedicated.management.dispatch.PropertiesRpcDispatcher;
import net.minecraft.server.dedicated.management.dispatch.ServerRpcDispatcher;
import net.minecraft.server.dedicated.management.schema.RpcSchema;
import net.minecraft.world.Difficulty;
import net.minecraft.world.GameMode;

public class IncomingRpcMethods {
    public static IncomingRpcMethod registerAndGetDefault(Registry<IncomingRpcMethod> registry) {
        IncomingRpcMethods.registerAllowlist(registry);
        IncomingRpcMethods.registerBans(registry);
        IncomingRpcMethods.registerIpBans(registry);
        IncomingRpcMethods.registerPlayers(registry);
        IncomingRpcMethods.registerOperators(registry);
        IncomingRpcMethods.registerServer(registry);
        IncomingRpcMethods.registerProperties(registry);
        IncomingRpcMethods.registerGameRule(registry);
        return IncomingRpcMethod.createParameterlessBuilder(dispatcher -> RpcDiscover.handleRpcDiscover(RpcSchema.getRegisteredSchemas()), RpcDiscover.Document.CODEC.codec()).noRequireMainThread().notDiscoverable().result(new RpcResponseResult("result", RpcSchema.STRING)).buildAndRegisterVanilla(registry, "rpc.discover");
    }

    private static void registerAllowlist(Registry<IncomingRpcMethod> registry) {
        IncomingRpcMethod.createParameterlessBuilder(AllowlistRpcDispatcher::get, RpcPlayer.CODEC.codec().listOf()).description("Get the allowlist").result(new RpcResponseResult("allowlist", RpcSchema.PLAYER.array())).buildAndRegisterVanilla(registry, "allowlist");
        IncomingRpcMethod.createParameterizedBuilder(AllowlistRpcDispatcher::set, RpcPlayer.CODEC.codec().listOf(), RpcPlayer.CODEC.codec().listOf()).description("Set the allowlist").parameter(new RpcRequestParameter("players", RpcSchema.PLAYER.array())).result(new RpcResponseResult("allowlist", RpcSchema.PLAYER.array())).buildAndRegisterVanilla(registry, "allowlist/set");
        IncomingRpcMethod.createParameterizedBuilder(AllowlistRpcDispatcher::add, RpcPlayer.CODEC.codec().listOf(), RpcPlayer.CODEC.codec().listOf()).description("Add players to allowlist").parameter(new RpcRequestParameter("add", RpcSchema.PLAYER.array())).result(new RpcResponseResult("allowlist", RpcSchema.PLAYER.array())).buildAndRegisterVanilla(registry, "allowlist/add");
        IncomingRpcMethod.createParameterizedBuilder(AllowlistRpcDispatcher::remove, RpcPlayer.CODEC.codec().listOf(), RpcPlayer.CODEC.codec().listOf()).description("Remove players from allowlist").parameter(new RpcRequestParameter("remove", RpcSchema.PLAYER.array())).result(new RpcResponseResult("allowlist", RpcSchema.PLAYER.array())).buildAndRegisterVanilla(registry, "allowlist/remove");
        IncomingRpcMethod.createParameterlessBuilder(AllowlistRpcDispatcher::clear, RpcPlayer.CODEC.codec().listOf()).description("Clear all players in allowlist").result(new RpcResponseResult("allowlist", RpcSchema.PLAYER.array())).buildAndRegisterVanilla(registry, "allowlist/clear");
    }

    private static void registerBans(Registry<IncomingRpcMethod> registry) {
        IncomingRpcMethod.createParameterlessBuilder(PlayerBansRpcDispatcher::get, PlayerBansRpcDispatcher.RpcEntry.CODEC.codec().listOf()).description("Get the ban list").result(new RpcResponseResult("banlist", RpcSchema.USER_BAN.array())).buildAndRegisterVanilla(registry, "bans");
        IncomingRpcMethod.createParameterizedBuilder(PlayerBansRpcDispatcher::set, PlayerBansRpcDispatcher.RpcEntry.CODEC.codec().listOf(), PlayerBansRpcDispatcher.RpcEntry.CODEC.codec().listOf()).description("Set the banlist").parameter(new RpcRequestParameter("bans", RpcSchema.USER_BAN.array())).result(new RpcResponseResult("banlist", RpcSchema.USER_BAN.array())).buildAndRegisterVanilla(registry, "bans/set");
        IncomingRpcMethod.createParameterizedBuilder(PlayerBansRpcDispatcher::add, PlayerBansRpcDispatcher.RpcEntry.CODEC.codec().listOf(), PlayerBansRpcDispatcher.RpcEntry.CODEC.codec().listOf()).description("Add players to ban list").parameter(new RpcRequestParameter("add", RpcSchema.USER_BAN.array())).result(new RpcResponseResult("banlist", RpcSchema.USER_BAN.array())).buildAndRegisterVanilla(registry, "bans/add");
        IncomingRpcMethod.createParameterizedBuilder(PlayerBansRpcDispatcher::remove, RpcPlayer.CODEC.codec().listOf(), PlayerBansRpcDispatcher.RpcEntry.CODEC.codec().listOf()).description("Remove players from ban list").parameter(new RpcRequestParameter("remove", RpcSchema.PLAYER.array())).result(new RpcResponseResult("banlist", RpcSchema.USER_BAN.array())).buildAndRegisterVanilla(registry, "bans/remove");
        IncomingRpcMethod.createParameterlessBuilder(PlayerBansRpcDispatcher::clear, PlayerBansRpcDispatcher.RpcEntry.CODEC.codec().listOf()).description("Clear all players in ban list").result(new RpcResponseResult("banlist", RpcSchema.USER_BAN.array())).buildAndRegisterVanilla(registry, "bans/clear");
    }

    private static void registerIpBans(Registry<IncomingRpcMethod> registry) {
        IncomingRpcMethod.createParameterlessBuilder(IpBansRpcDispatcher::get, IpBansRpcDispatcher.IpBanData.CODEC.codec().listOf()).description("Get the ip ban list").result(new RpcResponseResult("banlist", RpcSchema.IP_BAN.array())).buildAndRegisterVanilla(registry, "ip_bans");
        IncomingRpcMethod.createParameterizedBuilder(IpBansRpcDispatcher::set, IpBansRpcDispatcher.IpBanData.CODEC.codec().listOf(), IpBansRpcDispatcher.IpBanData.CODEC.codec().listOf()).description("Set the ip banlist").parameter(new RpcRequestParameter("banlist", RpcSchema.IP_BAN.array())).result(new RpcResponseResult("banlist", RpcSchema.IP_BAN.array())).buildAndRegisterVanilla(registry, "ip_bans/set");
        IncomingRpcMethod.createParameterizedBuilder(IpBansRpcDispatcher::add, IpBansRpcDispatcher.IncomingRpcIpBanData.CODEC.codec().listOf(), IpBansRpcDispatcher.IpBanData.CODEC.codec().listOf()).description("Add ip to ban list").parameter(new RpcRequestParameter("add", RpcSchema.INCOMING_IP_BAN.array())).result(new RpcResponseResult("banlist", RpcSchema.IP_BAN.array())).buildAndRegisterVanilla(registry, "ip_bans/add");
        IncomingRpcMethod.createParameterizedBuilder(IpBansRpcDispatcher::remove, Codec.STRING.listOf(), IpBansRpcDispatcher.IpBanData.CODEC.codec().listOf()).description("Remove ip from ban list").parameter(new RpcRequestParameter("ip", RpcSchema.STRING.asArray())).result(new RpcResponseResult("banlist", RpcSchema.IP_BAN.array())).buildAndRegisterVanilla(registry, "ip_bans/remove");
        IncomingRpcMethod.createParameterlessBuilder(IpBansRpcDispatcher::clearIpBans, IpBansRpcDispatcher.IpBanData.CODEC.codec().listOf()).description("Clear all ips in ban list").result(new RpcResponseResult("banlist", RpcSchema.IP_BAN.array())).buildAndRegisterVanilla(registry, "ip_bans/clear");
    }

    private static void registerPlayers(Registry<IncomingRpcMethod> registry) {
        IncomingRpcMethod.createParameterlessBuilder(PlayersRpcDispatcher::get, RpcPlayer.CODEC.codec().listOf()).description("Get all connected players").result(new RpcResponseResult("players", RpcSchema.PLAYER.array())).buildAndRegisterVanilla(registry, "players");
        IncomingRpcMethod.createParameterizedBuilder(PlayersRpcDispatcher::kick, PlayersRpcDispatcher.RpcEntry.CODEC.codec().listOf(), RpcPlayer.CODEC.codec().listOf()).description("Kick players").parameter(new RpcRequestParameter("kick", RpcSchema.KICK_PLAYER.array())).result(new RpcResponseResult("kicked", RpcSchema.PLAYER.array())).buildAndRegisterVanilla(registry, "players/kick");
    }

    private static void registerOperators(Registry<IncomingRpcMethod> registry) {
        IncomingRpcMethod.createParameterlessBuilder(OperatorsRpcDispatcher::get, OperatorsRpcDispatcher.RpcEntry.CODEC.codec().listOf()).description("Get all oped players").result(new RpcResponseResult("operators", RpcSchema.OPERATOR.array())).buildAndRegisterVanilla(registry, "operators");
        IncomingRpcMethod.createParameterizedBuilder(OperatorsRpcDispatcher::set, OperatorsRpcDispatcher.RpcEntry.CODEC.codec().listOf(), OperatorsRpcDispatcher.RpcEntry.CODEC.codec().listOf()).description("Set all oped players").parameter(new RpcRequestParameter("operators", RpcSchema.OPERATOR.array())).result(new RpcResponseResult("operators", RpcSchema.OPERATOR.array())).buildAndRegisterVanilla(registry, "operators/set");
        IncomingRpcMethod.createParameterizedBuilder(OperatorsRpcDispatcher::add, OperatorsRpcDispatcher.RpcEntry.CODEC.codec().listOf(), OperatorsRpcDispatcher.RpcEntry.CODEC.codec().listOf()).description("Op players").parameter(new RpcRequestParameter("add", RpcSchema.OPERATOR.array())).result(new RpcResponseResult("operators", RpcSchema.OPERATOR.array())).buildAndRegisterVanilla(registry, "operators/add");
        IncomingRpcMethod.createParameterizedBuilder(OperatorsRpcDispatcher::remove, RpcPlayer.CODEC.codec().listOf(), OperatorsRpcDispatcher.RpcEntry.CODEC.codec().listOf()).description("Deop players").parameter(new RpcRequestParameter("remove", RpcSchema.PLAYER.array())).result(new RpcResponseResult("operators", RpcSchema.OPERATOR.array())).buildAndRegisterVanilla(registry, "operators/remove");
        IncomingRpcMethod.createParameterlessBuilder(OperatorsRpcDispatcher::clear, OperatorsRpcDispatcher.RpcEntry.CODEC.codec().listOf()).description("Deop all players").result(new RpcResponseResult("operators", RpcSchema.OPERATOR.array())).buildAndRegisterVanilla(registry, "operators/clear");
    }

    private static void registerServer(Registry<IncomingRpcMethod> registry) {
        IncomingRpcMethod.createParameterlessBuilder(ServerRpcDispatcher::status, ServerRpcDispatcher.RpcStatus.CODEC).description("Get server status").result(new RpcResponseResult("status", RpcSchema.SERVER_STATE.ref())).buildAndRegisterVanilla(registry, "server/status");
        IncomingRpcMethod.createParameterizedBuilder(ServerRpcDispatcher::save, Codec.BOOL, Codec.BOOL).description("Save server state").parameter(new RpcRequestParameter("flush", RpcSchema.BOOLEAN)).result(new RpcResponseResult("saving", RpcSchema.BOOLEAN)).buildAndRegisterVanilla(registry, "server/save");
        IncomingRpcMethod.createParameterlessBuilder(ServerRpcDispatcher::stop, Codec.BOOL).description("Stop server").result(new RpcResponseResult("stopping", RpcSchema.BOOLEAN)).buildAndRegisterVanilla(registry, "server/stop");
        IncomingRpcMethod.createParameterizedBuilder(ServerRpcDispatcher::systemMessage, ServerRpcDispatcher.RpcSystemMessage.CODEC, Codec.BOOL).description("Send a system message").parameter(new RpcRequestParameter("message", RpcSchema.SYSTEM_MESSAGE.ref())).result(new RpcResponseResult("sent", RpcSchema.BOOLEAN)).buildAndRegisterVanilla(registry, "server/system_message");
    }

    private static void registerProperties(Registry<IncomingRpcMethod> registry) {
        IncomingRpcMethod.createParameterlessBuilder(PropertiesRpcDispatcher::getAutosave, Codec.BOOL).description("Get whether automatic world saving is enabled on the server").result(new RpcResponseResult("enabled", RpcSchema.BOOLEAN)).buildAndRegisterVanilla(registry, "serversettings/autosave");
        IncomingRpcMethod.createParameterizedBuilder(PropertiesRpcDispatcher::setAutosave, Codec.BOOL, Codec.BOOL).description("Enable or disable automatic world saving on the server").parameter(new RpcRequestParameter("enable", RpcSchema.BOOLEAN)).result(new RpcResponseResult("enabled", RpcSchema.BOOLEAN)).buildAndRegisterVanilla(registry, "serversettings/autosave/set");
        IncomingRpcMethod.createParameterlessBuilder(PropertiesRpcDispatcher::getDifficulty, Difficulty.CODEC).description("Get the current difficulty level of the server").result(new RpcResponseResult("difficulty", RpcSchema.DIFFICULTY.ref())).buildAndRegisterVanilla(registry, "serversettings/difficulty");
        IncomingRpcMethod.createParameterizedBuilder(PropertiesRpcDispatcher::setDifficulty, Difficulty.CODEC, Difficulty.CODEC).description("Set the difficulty level of the server").parameter(new RpcRequestParameter("difficulty", RpcSchema.DIFFICULTY.ref())).result(new RpcResponseResult("difficulty", RpcSchema.DIFFICULTY.ref())).buildAndRegisterVanilla(registry, "serversettings/difficulty/set");
        IncomingRpcMethod.createParameterlessBuilder(PropertiesRpcDispatcher::getEnforceAllowlist, Codec.BOOL).description("Get whether allowlist enforcement is enabled (kicks players immediately when removed from allowlist)").result(new RpcResponseResult("enforced", RpcSchema.BOOLEAN)).buildAndRegisterVanilla(registry, "serversettings/enforce_allowlist");
        IncomingRpcMethod.createParameterizedBuilder(PropertiesRpcDispatcher::setEnforceAllowlist, Codec.BOOL, Codec.BOOL).description("Enable or disable allowlist enforcement (when enabled, players are kicked immediately upon removal from allowlist)").parameter(new RpcRequestParameter("enforce", RpcSchema.BOOLEAN)).result(new RpcResponseResult("enforced", RpcSchema.BOOLEAN)).buildAndRegisterVanilla(registry, "serversettings/enforce_allowlist/set");
        IncomingRpcMethod.createParameterlessBuilder(PropertiesRpcDispatcher::getUseAllowlist, Codec.BOOL).description("Get whether the allowlist is enabled on the server").result(new RpcResponseResult("used", RpcSchema.BOOLEAN)).buildAndRegisterVanilla(registry, "serversettings/use_allowlist");
        IncomingRpcMethod.createParameterizedBuilder(PropertiesRpcDispatcher::setUseAllowlist, Codec.BOOL, Codec.BOOL).description("Enable or disable the allowlist on the server (controls whether only allowlisted players can join)").parameter(new RpcRequestParameter("use", RpcSchema.BOOLEAN)).result(new RpcResponseResult("used", RpcSchema.BOOLEAN)).buildAndRegisterVanilla(registry, "serversettings/use_allowlist/set");
        IncomingRpcMethod.createParameterlessBuilder(PropertiesRpcDispatcher::getMaxPlayers, Codec.INT).description("Get the maximum number of players allowed to connect to the server").result(new RpcResponseResult("max", RpcSchema.INTEGER)).buildAndRegisterVanilla(registry, "serversettings/max_players");
        IncomingRpcMethod.createParameterizedBuilder(PropertiesRpcDispatcher::setMaxPlayers, Codec.INT, Codec.INT).description("Set the maximum number of players allowed to connect to the server").parameter(new RpcRequestParameter("max", RpcSchema.INTEGER)).result(new RpcResponseResult("max", RpcSchema.INTEGER)).buildAndRegisterVanilla(registry, "serversettings/max_players/set");
        IncomingRpcMethod.createParameterlessBuilder(PropertiesRpcDispatcher::getPauseWhenEmptySeconds, Codec.INT).description("Get the number of seconds before the game is automatically paused when no players are online").result(new RpcResponseResult("seconds", RpcSchema.INTEGER)).buildAndRegisterVanilla(registry, "serversettings/pause_when_empty_seconds");
        IncomingRpcMethod.createParameterizedBuilder(PropertiesRpcDispatcher::setPauseWhenEmptySeconds, Codec.INT, Codec.INT).description("Set the number of seconds before the game is automatically paused when no players are online").parameter(new RpcRequestParameter("seconds", RpcSchema.INTEGER)).result(new RpcResponseResult("seconds", RpcSchema.INTEGER)).buildAndRegisterVanilla(registry, "serversettings/pause_when_empty_seconds/set");
        IncomingRpcMethod.createParameterlessBuilder(PropertiesRpcDispatcher::getPlayerIdleTimeout, Codec.INT).description("Get the number of seconds before idle players are automatically kicked from the server").result(new RpcResponseResult("seconds", RpcSchema.INTEGER)).buildAndRegisterVanilla(registry, "serversettings/player_idle_timeout");
        IncomingRpcMethod.createParameterizedBuilder(PropertiesRpcDispatcher::setPlayerIdleTimeout, Codec.INT, Codec.INT).description("Set the number of seconds before idle players are automatically kicked from the server").parameter(new RpcRequestParameter("seconds", RpcSchema.INTEGER)).result(new RpcResponseResult("seconds", RpcSchema.INTEGER)).buildAndRegisterVanilla(registry, "serversettings/player_idle_timeout/set");
        IncomingRpcMethod.createParameterlessBuilder(PropertiesRpcDispatcher::getAllowFlight, Codec.BOOL).description("Get whether flight is allowed for players in Survival mode").result(new RpcResponseResult("allowed", RpcSchema.BOOLEAN)).buildAndRegisterVanilla(registry, "serversettings/allow_flight");
        IncomingRpcMethod.createParameterizedBuilder(PropertiesRpcDispatcher::setAllowFlight, Codec.BOOL, Codec.BOOL).description("Allow or disallow flight for players in Survival mode").parameter(new RpcRequestParameter("allow", RpcSchema.BOOLEAN)).result(new RpcResponseResult("allowed", RpcSchema.BOOLEAN)).buildAndRegisterVanilla(registry, "serversettings/allow_flight/set");
        IncomingRpcMethod.createParameterlessBuilder(PropertiesRpcDispatcher::getMotd, Codec.STRING).description("Get the server's message of the day displayed to players").result(new RpcResponseResult("message", RpcSchema.STRING)).buildAndRegisterVanilla(registry, "serversettings/motd");
        IncomingRpcMethod.createParameterizedBuilder(PropertiesRpcDispatcher::setMotd, Codec.STRING, Codec.STRING).description("Set the server's message of the day displayed to players").parameter(new RpcRequestParameter("message", RpcSchema.STRING)).result(new RpcResponseResult("message", RpcSchema.STRING)).buildAndRegisterVanilla(registry, "serversettings/motd/set");
        IncomingRpcMethod.createParameterlessBuilder(PropertiesRpcDispatcher::getSpawnProtectionRadius, Codec.INT).description("Get the spawn protection radius in blocks (only operators can edit within this area)").result(new RpcResponseResult("radius", RpcSchema.INTEGER)).buildAndRegisterVanilla(registry, "serversettings/spawn_protection_radius");
        IncomingRpcMethod.createParameterizedBuilder(PropertiesRpcDispatcher::setSpawnProtectionRadius, Codec.INT, Codec.INT).description("Set the spawn protection radius in blocks (only operators can edit within this area)").parameter(new RpcRequestParameter("radius", RpcSchema.INTEGER)).result(new RpcResponseResult("radius", RpcSchema.INTEGER)).buildAndRegisterVanilla(registry, "serversettings/spawn_protection_radius/set");
        IncomingRpcMethod.createParameterlessBuilder(PropertiesRpcDispatcher::getForceGameMode, Codec.BOOL).description("Get whether players are forced to use the server's default game mode").result(new RpcResponseResult("forced", RpcSchema.BOOLEAN)).buildAndRegisterVanilla(registry, "serversettings/force_game_mode");
        IncomingRpcMethod.createParameterizedBuilder(PropertiesRpcDispatcher::setForceGameMode, Codec.BOOL, Codec.BOOL).description("Enable or disable forcing players to use the server's default game mode").parameter(new RpcRequestParameter("force", RpcSchema.BOOLEAN)).result(new RpcResponseResult("forced", RpcSchema.BOOLEAN)).buildAndRegisterVanilla(registry, "serversettings/force_game_mode/set");
        IncomingRpcMethod.createParameterlessBuilder(PropertiesRpcDispatcher::getGameMode, GameMode.CODEC).description("Get the server's default game mode").result(new RpcResponseResult("mode", RpcSchema.GAME_MODE.ref())).buildAndRegisterVanilla(registry, "serversettings/game_mode");
        IncomingRpcMethod.createParameterizedBuilder(PropertiesRpcDispatcher::setGameMode, GameMode.CODEC, GameMode.CODEC).description("Set the server's default game mode").parameter(new RpcRequestParameter("mode", RpcSchema.GAME_MODE.ref())).result(new RpcResponseResult("mode", RpcSchema.GAME_MODE.ref())).buildAndRegisterVanilla(registry, "serversettings/game_mode/set");
        IncomingRpcMethod.createParameterlessBuilder(PropertiesRpcDispatcher::getViewDistance, Codec.INT).description("Get the server's view distance in chunks").result(new RpcResponseResult("distance", RpcSchema.INTEGER)).buildAndRegisterVanilla(registry, "serversettings/view_distance");
        IncomingRpcMethod.createParameterizedBuilder(PropertiesRpcDispatcher::setViewDistance, Codec.INT, Codec.INT).description("Set the server's view distance in chunks").parameter(new RpcRequestParameter("distance", RpcSchema.INTEGER)).result(new RpcResponseResult("distance", RpcSchema.INTEGER)).buildAndRegisterVanilla(registry, "serversettings/view_distance/set");
        IncomingRpcMethod.createParameterlessBuilder(PropertiesRpcDispatcher::getSimulationDistance, Codec.INT).description("Get the server's simulation distance in chunks").result(new RpcResponseResult("distance", RpcSchema.INTEGER)).buildAndRegisterVanilla(registry, "serversettings/simulation_distance");
        IncomingRpcMethod.createParameterizedBuilder(PropertiesRpcDispatcher::setSimulationDistance, Codec.INT, Codec.INT).description("Set the server's simulation distance in chunks").parameter(new RpcRequestParameter("distance", RpcSchema.INTEGER)).result(new RpcResponseResult("distance", RpcSchema.INTEGER)).buildAndRegisterVanilla(registry, "serversettings/simulation_distance/set");
        IncomingRpcMethod.createParameterlessBuilder(PropertiesRpcDispatcher::getAcceptTransfers, Codec.BOOL).description("Get whether the server accepts player transfers from other servers").result(new RpcResponseResult("accepted", RpcSchema.BOOLEAN)).buildAndRegisterVanilla(registry, "serversettings/accept_transfers");
        IncomingRpcMethod.createParameterizedBuilder(PropertiesRpcDispatcher::setAcceptTransfers, Codec.BOOL, Codec.BOOL).description("Enable or disable accepting player transfers from other servers").parameter(new RpcRequestParameter("accept", RpcSchema.BOOLEAN)).result(new RpcResponseResult("accepted", RpcSchema.BOOLEAN)).buildAndRegisterVanilla(registry, "serversettings/accept_transfers/set");
        IncomingRpcMethod.createParameterlessBuilder(PropertiesRpcDispatcher::getStatusHeartbeatInterval, Codec.INT).description("Get the interval in seconds between server status heartbeats").result(new RpcResponseResult("seconds", RpcSchema.INTEGER)).buildAndRegisterVanilla(registry, "serversettings/status_heartbeat_interval");
        IncomingRpcMethod.createParameterizedBuilder(PropertiesRpcDispatcher::setStatusHeartbeatInterval, Codec.INT, Codec.INT).description("Set the interval in seconds between server status heartbeats").parameter(new RpcRequestParameter("seconds", RpcSchema.INTEGER)).result(new RpcResponseResult("seconds", RpcSchema.INTEGER)).buildAndRegisterVanilla(registry, "serversettings/status_heartbeat_interval/set");
        IncomingRpcMethod.createParameterlessBuilder(PropertiesRpcDispatcher::getOperatorUserPermissionLevel, Codec.INT).description("Get default operator permission level").result(new RpcResponseResult("level", RpcSchema.INTEGER)).buildAndRegisterVanilla(registry, "serversettings/operator_user_permission_level");
        IncomingRpcMethod.createParameterizedBuilder(PropertiesRpcDispatcher::setOperatorUserPermissionLevel, Codec.INT, Codec.INT).description("Set default operator permission level").parameter(new RpcRequestParameter("level", RpcSchema.INTEGER)).result(new RpcResponseResult("level", RpcSchema.INTEGER)).buildAndRegisterVanilla(registry, "serversettings/operator_user_permission_level/set");
        IncomingRpcMethod.createParameterlessBuilder(PropertiesRpcDispatcher::getHideOnlinePlayers, Codec.BOOL).description("Get whether the server hides online player information from status queries").result(new RpcResponseResult("hidden", RpcSchema.BOOLEAN)).buildAndRegisterVanilla(registry, "serversettings/hide_online_players");
        IncomingRpcMethod.createParameterizedBuilder(PropertiesRpcDispatcher::setHideOnlinePlayers, Codec.BOOL, Codec.BOOL).description("Enable or disable hiding online player information from status queries").parameter(new RpcRequestParameter("hide", RpcSchema.BOOLEAN)).result(new RpcResponseResult("hidden", RpcSchema.BOOLEAN)).buildAndRegisterVanilla(registry, "serversettings/hide_online_players/set");
        IncomingRpcMethod.createParameterlessBuilder(PropertiesRpcDispatcher::getStatusReplies, Codec.BOOL).description("Get whether the server responds to connection status requests").result(new RpcResponseResult("enabled", RpcSchema.BOOLEAN)).buildAndRegisterVanilla(registry, "serversettings/status_replies");
        IncomingRpcMethod.createParameterizedBuilder(PropertiesRpcDispatcher::setStatusReplies, Codec.BOOL, Codec.BOOL).description("Enable or disable the server responding to connection status requests").parameter(new RpcRequestParameter("enable", RpcSchema.BOOLEAN)).result(new RpcResponseResult("enabled", RpcSchema.BOOLEAN)).buildAndRegisterVanilla(registry, "serversettings/status_replies/set");
        IncomingRpcMethod.createParameterlessBuilder(PropertiesRpcDispatcher::getEntityBroadcastRange, Codec.INT).description("Get the entity broadcast range as a percentage").result(new RpcResponseResult("percentage_points", RpcSchema.INTEGER)).buildAndRegisterVanilla(registry, "serversettings/entity_broadcast_range");
        IncomingRpcMethod.createParameterizedBuilder(PropertiesRpcDispatcher::setEntityBroadcastRange, Codec.INT, Codec.INT).description("Set the entity broadcast range as a percentage").parameter(new RpcRequestParameter("percentage_points", RpcSchema.INTEGER)).result(new RpcResponseResult("percentage_points", RpcSchema.INTEGER)).buildAndRegisterVanilla(registry, "serversettings/entity_broadcast_range/set");
    }

    private static void registerGameRule(Registry<IncomingRpcMethod> registry) {
        IncomingRpcMethod.createParameterlessBuilder(GameRuleRpcDispatcher::get, GameRuleRpcDispatcher.TypedRule.CODEC.codec().listOf()).description("Get the available game rule keys and their current values").result(new RpcResponseResult("gamerules", RpcSchema.TYPED_GAME_RULE.ref().asArray())).buildAndRegisterVanilla(registry, "gamerules");
        IncomingRpcMethod.createParameterizedBuilder(GameRuleRpcDispatcher::updateRule, GameRuleRpcDispatcher.UntypedRule.CODEC.codec(), GameRuleRpcDispatcher.TypedRule.CODEC.codec()).description("Update game rule value").parameter(new RpcRequestParameter("gamerule", RpcSchema.UNTYPED_GAME_RULE.ref())).result(new RpcResponseResult("gamerule", RpcSchema.TYPED_GAME_RULE.ref())).buildAndRegisterVanilla(registry, "gamerules/update");
    }
}


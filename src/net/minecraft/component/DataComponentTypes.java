/*
 * Decompiled with CFR 0.2.2 (FabricMC 7c48b8c4).
 */
package net.minecraft.component;

import com.mojang.serialization.Codec;
import java.util.List;
import java.util.function.UnaryOperator;
import net.minecraft.block.entity.BannerPattern;
import net.minecraft.block.entity.BlockEntityType;
import net.minecraft.block.entity.Sherds;
import net.minecraft.component.ComponentMap;
import net.minecraft.component.ComponentType;
import net.minecraft.component.type.AttributeModifiersComponent;
import net.minecraft.component.type.BannerPatternsComponent;
import net.minecraft.component.type.BeesComponent;
import net.minecraft.component.type.BlockPredicatesComponent;
import net.minecraft.component.type.BlockStateComponent;
import net.minecraft.component.type.BlocksAttacksComponent;
import net.minecraft.component.type.BundleContentsComponent;
import net.minecraft.component.type.ChargedProjectilesComponent;
import net.minecraft.component.type.ConsumableComponent;
import net.minecraft.component.type.ContainerComponent;
import net.minecraft.component.type.ContainerLootComponent;
import net.minecraft.component.type.CustomModelDataComponent;
import net.minecraft.component.type.DamageResistantComponent;
import net.minecraft.component.type.DeathProtectionComponent;
import net.minecraft.component.type.DebugStickStateComponent;
import net.minecraft.component.type.DyedColorComponent;
import net.minecraft.component.type.EnchantableComponent;
import net.minecraft.component.type.EquippableComponent;
import net.minecraft.component.type.FireworkExplosionComponent;
import net.minecraft.component.type.FireworksComponent;
import net.minecraft.component.type.FoodComponent;
import net.minecraft.component.type.InstrumentComponent;
import net.minecraft.component.type.ItemEnchantmentsComponent;
import net.minecraft.component.type.JukeboxPlayableComponent;
import net.minecraft.component.type.LodestoneTrackerComponent;
import net.minecraft.component.type.LoreComponent;
import net.minecraft.component.type.MapColorComponent;
import net.minecraft.component.type.MapDecorationsComponent;
import net.minecraft.component.type.MapIdComponent;
import net.minecraft.component.type.MapPostProcessingComponent;
import net.minecraft.component.type.NbtComponent;
import net.minecraft.component.type.OminousBottleAmplifierComponent;
import net.minecraft.component.type.PotionContentsComponent;
import net.minecraft.component.type.ProfileComponent;
import net.minecraft.component.type.ProvidesTrimMaterialComponent;
import net.minecraft.component.type.RepairableComponent;
import net.minecraft.component.type.SuspiciousStewEffectsComponent;
import net.minecraft.component.type.ToolComponent;
import net.minecraft.component.type.TooltipDisplayComponent;
import net.minecraft.component.type.UseCooldownComponent;
import net.minecraft.component.type.UseRemainderComponent;
import net.minecraft.component.type.WeaponComponent;
import net.minecraft.component.type.WritableBookContentComponent;
import net.minecraft.component.type.WrittenBookContentComponent;
import net.minecraft.entity.EntityType;
import net.minecraft.entity.TypedEntityData;
import net.minecraft.entity.decoration.painting.PaintingVariant;
import net.minecraft.entity.passive.AxolotlEntity;
import net.minecraft.entity.passive.CatVariant;
import net.minecraft.entity.passive.ChickenVariant;
import net.minecraft.entity.passive.CowVariant;
import net.minecraft.entity.passive.FoxEntity;
import net.minecraft.entity.passive.FrogVariant;
import net.minecraft.entity.passive.HorseColor;
import net.minecraft.entity.passive.LlamaEntity;
import net.minecraft.entity.passive.MooshroomEntity;
import net.minecraft.entity.passive.ParrotEntity;
import net.minecraft.entity.passive.PigVariant;
import net.minecraft.entity.passive.RabbitEntity;
import net.minecraft.entity.passive.SalmonEntity;
import net.minecraft.entity.passive.TropicalFishEntity;
import net.minecraft.entity.passive.WolfSoundVariant;
import net.minecraft.entity.passive.WolfVariant;
import net.minecraft.inventory.ContainerLock;
import net.minecraft.item.equipment.trim.ArmorTrim;
import net.minecraft.network.codec.PacketCodecs;
import net.minecraft.recipe.Recipe;
import net.minecraft.registry.Registries;
import net.minecraft.registry.Registry;
import net.minecraft.registry.RegistryKey;
import net.minecraft.registry.RegistryKeys;
import net.minecraft.registry.entry.LazyRegistryEntryReference;
import net.minecraft.registry.entry.RegistryEntry;
import net.minecraft.registry.tag.TagKey;
import net.minecraft.sound.SoundEvent;
import net.minecraft.sound.SoundEvents;
import net.minecraft.text.Text;
import net.minecraft.text.TextCodecs;
import net.minecraft.util.DyeColor;
import net.minecraft.util.Identifier;
import net.minecraft.util.Rarity;
import net.minecraft.util.Unit;
import net.minecraft.util.dynamic.CodecCache;
import net.minecraft.util.dynamic.Codecs;
import net.minecraft.village.VillagerType;

public class DataComponentTypes {
    static final CodecCache CACHE = new CodecCache(512);
    public static final ComponentType<NbtComponent> CUSTOM_DATA = DataComponentTypes.register("custom_data", builder -> builder.codec(NbtComponent.CODEC));
    public static final ComponentType<Integer> MAX_STACK_SIZE = DataComponentTypes.register("max_stack_size", builder -> builder.codec(Codecs.rangedInt(1, 99)).packetCodec(PacketCodecs.VAR_INT));
    public static final ComponentType<Integer> MAX_DAMAGE = DataComponentTypes.register("max_damage", builder -> builder.codec(Codecs.POSITIVE_INT).packetCodec(PacketCodecs.VAR_INT));
    public static final ComponentType<Integer> DAMAGE = DataComponentTypes.register("damage", builder -> builder.codec(Codecs.NON_NEGATIVE_INT).packetCodec(PacketCodecs.VAR_INT));
    public static final ComponentType<Unit> UNBREAKABLE = DataComponentTypes.register("unbreakable", builder -> builder.codec(Unit.CODEC).packetCodec(Unit.PACKET_CODEC));
    public static final ComponentType<Text> CUSTOM_NAME = DataComponentTypes.register("custom_name", builder -> builder.codec(TextCodecs.CODEC).packetCodec(TextCodecs.REGISTRY_PACKET_CODEC).cache());
    public static final ComponentType<Text> ITEM_NAME = DataComponentTypes.register("item_name", builder -> builder.codec(TextCodecs.CODEC).packetCodec(TextCodecs.REGISTRY_PACKET_CODEC).cache());
    public static final ComponentType<Identifier> ITEM_MODEL = DataComponentTypes.register("item_model", builder -> builder.codec(Identifier.CODEC).packetCodec(Identifier.PACKET_CODEC).cache());
    public static final ComponentType<LoreComponent> LORE = DataComponentTypes.register("lore", builder -> builder.codec(LoreComponent.CODEC).packetCodec(LoreComponent.PACKET_CODEC).cache());
    public static final ComponentType<Rarity> RARITY = DataComponentTypes.register("rarity", builder -> builder.codec(Rarity.CODEC).packetCodec(Rarity.PACKET_CODEC));
    public static final ComponentType<ItemEnchantmentsComponent> ENCHANTMENTS = DataComponentTypes.register("enchantments", builder -> builder.codec(ItemEnchantmentsComponent.CODEC).packetCodec(ItemEnchantmentsComponent.PACKET_CODEC).cache());
    public static final ComponentType<BlockPredicatesComponent> CAN_PLACE_ON = DataComponentTypes.register("can_place_on", builder -> builder.codec(BlockPredicatesComponent.CODEC).packetCodec(BlockPredicatesComponent.PACKET_CODEC).cache());
    public static final ComponentType<BlockPredicatesComponent> CAN_BREAK = DataComponentTypes.register("can_break", builder -> builder.codec(BlockPredicatesComponent.CODEC).packetCodec(BlockPredicatesComponent.PACKET_CODEC).cache());
    public static final ComponentType<AttributeModifiersComponent> ATTRIBUTE_MODIFIERS = DataComponentTypes.register("attribute_modifiers", builder -> builder.codec(AttributeModifiersComponent.CODEC).packetCodec(AttributeModifiersComponent.PACKET_CODEC).cache());
    public static final ComponentType<CustomModelDataComponent> CUSTOM_MODEL_DATA = DataComponentTypes.register("custom_model_data", builder -> builder.codec(CustomModelDataComponent.CODEC).packetCodec(CustomModelDataComponent.PACKET_CODEC));
    public static final ComponentType<TooltipDisplayComponent> TOOLTIP_DISPLAY = DataComponentTypes.register("tooltip_display", builder -> builder.codec(TooltipDisplayComponent.CODEC).packetCodec(TooltipDisplayComponent.PACKET_CODEC).cache());
    public static final ComponentType<Integer> REPAIR_COST = DataComponentTypes.register("repair_cost", builder -> builder.codec(Codecs.NON_NEGATIVE_INT).packetCodec(PacketCodecs.VAR_INT));
    public static final ComponentType<Unit> CREATIVE_SLOT_LOCK = DataComponentTypes.register("creative_slot_lock", builder -> builder.packetCodec(Unit.PACKET_CODEC));
    public static final ComponentType<Boolean> ENCHANTMENT_GLINT_OVERRIDE = DataComponentTypes.register("enchantment_glint_override", builder -> builder.codec(Codec.BOOL).packetCodec(PacketCodecs.BOOLEAN));
    public static final ComponentType<Unit> INTANGIBLE_PROJECTILE = DataComponentTypes.register("intangible_projectile", builder -> builder.codec(Unit.CODEC));
    public static final ComponentType<FoodComponent> FOOD = DataComponentTypes.register("food", builder -> builder.codec(FoodComponent.CODEC).packetCodec(FoodComponent.PACKET_CODEC).cache());
    public static final ComponentType<ConsumableComponent> CONSUMABLE = DataComponentTypes.register("consumable", builder -> builder.codec(ConsumableComponent.CODEC).packetCodec(ConsumableComponent.PACKET_CODEC).cache());
    public static final ComponentType<UseRemainderComponent> USE_REMAINDER = DataComponentTypes.register("use_remainder", builder -> builder.codec(UseRemainderComponent.CODEC).packetCodec(UseRemainderComponent.PACKET_CODEC).cache());
    public static final ComponentType<UseCooldownComponent> USE_COOLDOWN = DataComponentTypes.register("use_cooldown", builder -> builder.codec(UseCooldownComponent.CODEC).packetCodec(UseCooldownComponent.PACKET_CODEC).cache());
    public static final ComponentType<DamageResistantComponent> DAMAGE_RESISTANT = DataComponentTypes.register("damage_resistant", builder -> builder.codec(DamageResistantComponent.CODEC).packetCodec(DamageResistantComponent.PACKET_CODEC).cache());
    public static final ComponentType<ToolComponent> TOOL = DataComponentTypes.register("tool", builder -> builder.codec(ToolComponent.CODEC).packetCodec(ToolComponent.PACKET_CODEC).cache());
    public static final ComponentType<WeaponComponent> WEAPON = DataComponentTypes.register("weapon", builder -> builder.codec(WeaponComponent.CODEC).packetCodec(WeaponComponent.PACKET_CODEC).cache());
    public static final ComponentType<EnchantableComponent> ENCHANTABLE = DataComponentTypes.register("enchantable", builder -> builder.codec(EnchantableComponent.CODEC).packetCodec(EnchantableComponent.PACKET_CODEC).cache());
    public static final ComponentType<EquippableComponent> EQUIPPABLE = DataComponentTypes.register("equippable", builder -> builder.codec(EquippableComponent.CODEC).packetCodec(EquippableComponent.PACKET_CODEC).cache());
    public static final ComponentType<RepairableComponent> REPAIRABLE = DataComponentTypes.register("repairable", builder -> builder.codec(RepairableComponent.CODEC).packetCodec(RepairableComponent.PACKET_CODEC).cache());
    public static final ComponentType<Unit> GLIDER = DataComponentTypes.register("glider", builder -> builder.codec(Unit.CODEC).packetCodec(Unit.PACKET_CODEC));
    public static final ComponentType<Identifier> TOOLTIP_STYLE = DataComponentTypes.register("tooltip_style", builder -> builder.codec(Identifier.CODEC).packetCodec(Identifier.PACKET_CODEC).cache());
    public static final ComponentType<DeathProtectionComponent> DEATH_PROTECTION = DataComponentTypes.register("death_protection", builder -> builder.codec(DeathProtectionComponent.CODEC).packetCodec(DeathProtectionComponent.PACKET_CODEC).cache());
    public static final ComponentType<BlocksAttacksComponent> BLOCKS_ATTACKS = DataComponentTypes.register("blocks_attacks", builder -> builder.codec(BlocksAttacksComponent.CODEC).packetCodec(BlocksAttacksComponent.PACKET_CODEC).cache());
    public static final ComponentType<ItemEnchantmentsComponent> STORED_ENCHANTMENTS = DataComponentTypes.register("stored_enchantments", builder -> builder.codec(ItemEnchantmentsComponent.CODEC).packetCodec(ItemEnchantmentsComponent.PACKET_CODEC).cache());
    public static final ComponentType<DyedColorComponent> DYED_COLOR = DataComponentTypes.register("dyed_color", builder -> builder.codec(DyedColorComponent.CODEC).packetCodec(DyedColorComponent.PACKET_CODEC));
    public static final ComponentType<MapColorComponent> MAP_COLOR = DataComponentTypes.register("map_color", builder -> builder.codec(MapColorComponent.CODEC).packetCodec(MapColorComponent.PACKET_CODEC));
    public static final ComponentType<MapIdComponent> MAP_ID = DataComponentTypes.register("map_id", builder -> builder.codec(MapIdComponent.CODEC).packetCodec(MapIdComponent.PACKET_CODEC));
    public static final ComponentType<MapDecorationsComponent> MAP_DECORATIONS = DataComponentTypes.register("map_decorations", builder -> builder.codec(MapDecorationsComponent.CODEC).cache());
    public static final ComponentType<MapPostProcessingComponent> MAP_POST_PROCESSING = DataComponentTypes.register("map_post_processing", builder -> builder.packetCodec(MapPostProcessingComponent.PACKET_CODEC));
    public static final ComponentType<ChargedProjectilesComponent> CHARGED_PROJECTILES = DataComponentTypes.register("charged_projectiles", builder -> builder.codec(ChargedProjectilesComponent.CODEC).packetCodec(ChargedProjectilesComponent.PACKET_CODEC).cache());
    public static final ComponentType<BundleContentsComponent> BUNDLE_CONTENTS = DataComponentTypes.register("bundle_contents", builder -> builder.codec(BundleContentsComponent.CODEC).packetCodec(BundleContentsComponent.PACKET_CODEC).cache());
    public static final ComponentType<PotionContentsComponent> POTION_CONTENTS = DataComponentTypes.register("potion_contents", builder -> builder.codec(PotionContentsComponent.CODEC).packetCodec(PotionContentsComponent.PACKET_CODEC).cache());
    public static final ComponentType<Float> POTION_DURATION_SCALE = DataComponentTypes.register("potion_duration_scale", builder -> builder.codec(Codecs.NON_NEGATIVE_FLOAT).packetCodec(PacketCodecs.FLOAT).cache());
    public static final ComponentType<SuspiciousStewEffectsComponent> SUSPICIOUS_STEW_EFFECTS = DataComponentTypes.register("suspicious_stew_effects", builder -> builder.codec(SuspiciousStewEffectsComponent.CODEC).packetCodec(SuspiciousStewEffectsComponent.PACKET_CODEC).cache());
    public static final ComponentType<WritableBookContentComponent> WRITABLE_BOOK_CONTENT = DataComponentTypes.register("writable_book_content", builder -> builder.codec(WritableBookContentComponent.CODEC).packetCodec(WritableBookContentComponent.PACKET_CODEC).cache());
    public static final ComponentType<WrittenBookContentComponent> WRITTEN_BOOK_CONTENT = DataComponentTypes.register("written_book_content", builder -> builder.codec(WrittenBookContentComponent.CODEC).packetCodec(WrittenBookContentComponent.PACKET_CODEC).cache());
    public static final ComponentType<ArmorTrim> TRIM = DataComponentTypes.register("trim", builder -> builder.codec(ArmorTrim.CODEC).packetCodec(ArmorTrim.PACKET_CODEC).cache());
    public static final ComponentType<DebugStickStateComponent> DEBUG_STICK_STATE = DataComponentTypes.register("debug_stick_state", builder -> builder.codec(DebugStickStateComponent.CODEC).cache());
    public static final ComponentType<TypedEntityData<EntityType<?>>> ENTITY_DATA = DataComponentTypes.register("entity_data", builder -> builder.codec(TypedEntityData.createCodec(EntityType.CODEC)).packetCodec(TypedEntityData.createPacketCodec(EntityType.PACKET_CODEC)));
    public static final ComponentType<NbtComponent> BUCKET_ENTITY_DATA = DataComponentTypes.register("bucket_entity_data", builder -> builder.codec(NbtComponent.CODEC).packetCodec(NbtComponent.PACKET_CODEC));
    public static final ComponentType<TypedEntityData<BlockEntityType<?>>> BLOCK_ENTITY_DATA = DataComponentTypes.register("block_entity_data", builder -> builder.codec(TypedEntityData.createCodec(Registries.BLOCK_ENTITY_TYPE.getCodec())).packetCodec(TypedEntityData.createPacketCodec(PacketCodecs.registryValue(RegistryKeys.BLOCK_ENTITY_TYPE))));
    public static final ComponentType<InstrumentComponent> INSTRUMENT = DataComponentTypes.register("instrument", builder -> builder.codec(InstrumentComponent.CODEC).packetCodec(InstrumentComponent.PACKET_CODEC).cache());
    public static final ComponentType<ProvidesTrimMaterialComponent> PROVIDES_TRIM_MATERIAL = DataComponentTypes.register("provides_trim_material", builder -> builder.codec(ProvidesTrimMaterialComponent.CODEC).packetCodec(ProvidesTrimMaterialComponent.PACKET_CODEC).cache());
    public static final ComponentType<OminousBottleAmplifierComponent> OMINOUS_BOTTLE_AMPLIFIER = DataComponentTypes.register("ominous_bottle_amplifier", builder -> builder.codec(OminousBottleAmplifierComponent.CODEC).packetCodec(OminousBottleAmplifierComponent.PACKET_CODEC));
    public static final ComponentType<JukeboxPlayableComponent> JUKEBOX_PLAYABLE = DataComponentTypes.register("jukebox_playable", builder -> builder.codec(JukeboxPlayableComponent.CODEC).packetCodec(JukeboxPlayableComponent.PACKET_CODEC));
    public static final ComponentType<TagKey<BannerPattern>> PROVIDES_BANNER_PATTERNS = DataComponentTypes.register("provides_banner_patterns", builder -> builder.codec(TagKey.codec(RegistryKeys.BANNER_PATTERN)).packetCodec(TagKey.packetCodec(RegistryKeys.BANNER_PATTERN)).cache());
    public static final ComponentType<List<RegistryKey<Recipe<?>>>> RECIPES = DataComponentTypes.register("recipes", builder -> builder.codec(Recipe.KEY_CODEC.listOf()).cache());
    public static final ComponentType<LodestoneTrackerComponent> LODESTONE_TRACKER = DataComponentTypes.register("lodestone_tracker", builder -> builder.codec(LodestoneTrackerComponent.CODEC).packetCodec(LodestoneTrackerComponent.PACKET_CODEC).cache());
    public static final ComponentType<FireworkExplosionComponent> FIREWORK_EXPLOSION = DataComponentTypes.register("firework_explosion", builder -> builder.codec(FireworkExplosionComponent.CODEC).packetCodec(FireworkExplosionComponent.PACKET_CODEC).cache());
    public static final ComponentType<FireworksComponent> FIREWORKS = DataComponentTypes.register("fireworks", builder -> builder.codec(FireworksComponent.CODEC).packetCodec(FireworksComponent.PACKET_CODEC).cache());
    public static final ComponentType<ProfileComponent> PROFILE = DataComponentTypes.register("profile", builder -> builder.codec(ProfileComponent.CODEC).packetCodec(ProfileComponent.PACKET_CODEC).cache());
    public static final ComponentType<Identifier> NOTE_BLOCK_SOUND = DataComponentTypes.register("note_block_sound", builder -> builder.codec(Identifier.CODEC).packetCodec(Identifier.PACKET_CODEC));
    public static final ComponentType<BannerPatternsComponent> BANNER_PATTERNS = DataComponentTypes.register("banner_patterns", builder -> builder.codec(BannerPatternsComponent.CODEC).packetCodec(BannerPatternsComponent.PACKET_CODEC).cache());
    public static final ComponentType<DyeColor> BASE_COLOR = DataComponentTypes.register("base_color", builder -> builder.codec(DyeColor.CODEC).packetCodec(DyeColor.PACKET_CODEC));
    public static final ComponentType<Sherds> POT_DECORATIONS = DataComponentTypes.register("pot_decorations", builder -> builder.codec(Sherds.CODEC).packetCodec(Sherds.PACKET_CODEC).cache());
    public static final ComponentType<ContainerComponent> CONTAINER = DataComponentTypes.register("container", builder -> builder.codec(ContainerComponent.CODEC).packetCodec(ContainerComponent.PACKET_CODEC).cache());
    public static final ComponentType<BlockStateComponent> BLOCK_STATE = DataComponentTypes.register("block_state", builder -> builder.codec(BlockStateComponent.CODEC).packetCodec(BlockStateComponent.PACKET_CODEC).cache());
    public static final ComponentType<BeesComponent> BEES = DataComponentTypes.register("bees", builder -> builder.codec(BeesComponent.CODEC).packetCodec(BeesComponent.PACKET_CODEC).cache());
    public static final ComponentType<ContainerLock> LOCK = DataComponentTypes.register("lock", builder -> builder.codec(ContainerLock.CODEC));
    public static final ComponentType<ContainerLootComponent> CONTAINER_LOOT = DataComponentTypes.register("container_loot", builder -> builder.codec(ContainerLootComponent.CODEC));
    public static final ComponentType<RegistryEntry<SoundEvent>> BREAK_SOUND = DataComponentTypes.register("break_sound", builder -> builder.codec(SoundEvent.ENTRY_CODEC).packetCodec(SoundEvent.ENTRY_PACKET_CODEC).cache());
    public static final ComponentType<RegistryEntry<VillagerType>> VILLAGER_VARIANT = DataComponentTypes.register("villager/variant", builder -> builder.codec(VillagerType.CODEC).packetCodec(VillagerType.PACKET_CODEC));
    public static final ComponentType<RegistryEntry<WolfVariant>> WOLF_VARIANT = DataComponentTypes.register("wolf/variant", builder -> builder.codec(WolfVariant.ENTRY_CODEC).packetCodec(WolfVariant.ENTRY_PACKET_CODEC));
    public static final ComponentType<RegistryEntry<WolfSoundVariant>> WOLF_SOUND_VARIANT = DataComponentTypes.register("wolf/sound_variant", builder -> builder.codec(WolfSoundVariant.ENTRY_CODEC).packetCodec(WolfSoundVariant.PACKET_CODEC));
    public static final ComponentType<DyeColor> WOLF_COLLAR = DataComponentTypes.register("wolf/collar", builder -> builder.codec(DyeColor.CODEC).packetCodec(DyeColor.PACKET_CODEC));
    public static final ComponentType<FoxEntity.Variant> FOX_VARIANT = DataComponentTypes.register("fox/variant", builder -> builder.codec(FoxEntity.Variant.CODEC).packetCodec(FoxEntity.Variant.PACKET_CODEC));
    public static final ComponentType<SalmonEntity.Variant> SALMON_SIZE = DataComponentTypes.register("salmon/size", builder -> builder.codec(SalmonEntity.Variant.CODEC).packetCodec(SalmonEntity.Variant.PACKET_CODEC));
    public static final ComponentType<ParrotEntity.Variant> PARROT_VARIANT = DataComponentTypes.register("parrot/variant", builder -> builder.codec(ParrotEntity.Variant.CODEC).packetCodec(ParrotEntity.Variant.PACKET_CODEC));
    public static final ComponentType<TropicalFishEntity.Pattern> TROPICAL_FISH_PATTERN = DataComponentTypes.register("tropical_fish/pattern", builder -> builder.codec(TropicalFishEntity.Pattern.CODEC).packetCodec(TropicalFishEntity.Pattern.PACKET_CODEC));
    public static final ComponentType<DyeColor> TROPICAL_FISH_BASE_COLOR = DataComponentTypes.register("tropical_fish/base_color", builder -> builder.codec(DyeColor.CODEC).packetCodec(DyeColor.PACKET_CODEC));
    public static final ComponentType<DyeColor> TROPICAL_FISH_PATTERN_COLOR = DataComponentTypes.register("tropical_fish/pattern_color", builder -> builder.codec(DyeColor.CODEC).packetCodec(DyeColor.PACKET_CODEC));
    public static final ComponentType<MooshroomEntity.Variant> MOOSHROOM_VARIANT = DataComponentTypes.register("mooshroom/variant", builder -> builder.codec(MooshroomEntity.Variant.CODEC).packetCodec(MooshroomEntity.Variant.PACKET_CODEC));
    public static final ComponentType<RabbitEntity.Variant> RABBIT_VARIANT = DataComponentTypes.register("rabbit/variant", builder -> builder.codec(RabbitEntity.Variant.CODEC).packetCodec(RabbitEntity.Variant.PACKET_CODEC));
    public static final ComponentType<RegistryEntry<PigVariant>> PIG_VARIANT = DataComponentTypes.register("pig/variant", builder -> builder.codec(PigVariant.ENTRY_CODEC).packetCodec(PigVariant.ENTRY_PACKET_CODEC));
    public static final ComponentType<RegistryEntry<CowVariant>> COW_VARIANT = DataComponentTypes.register("cow/variant", builder -> builder.codec(CowVariant.ENTRY_CODEC).packetCodec(CowVariant.ENTRY_PACKET_CODEC));
    public static final ComponentType<LazyRegistryEntryReference<ChickenVariant>> CHICKEN_VARIANT = DataComponentTypes.register("chicken/variant", builder -> builder.codec(LazyRegistryEntryReference.createCodec(RegistryKeys.CHICKEN_VARIANT, ChickenVariant.ENTRY_CODEC)).packetCodec(LazyRegistryEntryReference.createPacketCodec(RegistryKeys.CHICKEN_VARIANT, ChickenVariant.ENTRY_PACKET_CODEC)));
    public static final ComponentType<RegistryEntry<FrogVariant>> FROG_VARIANT = DataComponentTypes.register("frog/variant", builder -> builder.codec(FrogVariant.ENTRY_CODEC).packetCodec(FrogVariant.PACKET_CODEC));
    public static final ComponentType<HorseColor> HORSE_VARIANT = DataComponentTypes.register("horse/variant", builder -> builder.codec(HorseColor.CODEC).packetCodec(HorseColor.PACKET_CODEC));
    public static final ComponentType<RegistryEntry<PaintingVariant>> PAINTING_VARIANT = DataComponentTypes.register("painting/variant", builder -> builder.codec(PaintingVariant.ENTRY_CODEC).packetCodec(PaintingVariant.ENTRY_PACKET_CODEC));
    public static final ComponentType<LlamaEntity.Variant> LLAMA_VARIANT = DataComponentTypes.register("llama/variant", builder -> builder.codec(LlamaEntity.Variant.CODEC).packetCodec(LlamaEntity.Variant.PACKET_CODEC));
    public static final ComponentType<AxolotlEntity.Variant> AXOLOTL_VARIANT = DataComponentTypes.register("axolotl/variant", builder -> builder.codec(AxolotlEntity.Variant.CODEC).packetCodec(AxolotlEntity.Variant.PACKET_CODEC));
    public static final ComponentType<RegistryEntry<CatVariant>> CAT_VARIANT = DataComponentTypes.register("cat/variant", builder -> builder.codec(CatVariant.ENTRY_CODEC).packetCodec(CatVariant.PACKET_CODEC));
    public static final ComponentType<DyeColor> CAT_COLLAR = DataComponentTypes.register("cat/collar", builder -> builder.codec(DyeColor.CODEC).packetCodec(DyeColor.PACKET_CODEC));
    public static final ComponentType<DyeColor> SHEEP_COLOR = DataComponentTypes.register("sheep/color", builder -> builder.codec(DyeColor.CODEC).packetCodec(DyeColor.PACKET_CODEC));
    public static final ComponentType<DyeColor> SHULKER_COLOR = DataComponentTypes.register("shulker/color", builder -> builder.codec(DyeColor.CODEC).packetCodec(DyeColor.PACKET_CODEC));
    public static final ComponentMap DEFAULT_ITEM_COMPONENTS = ComponentMap.builder().add(MAX_STACK_SIZE, 64).add(LORE, LoreComponent.DEFAULT).add(ENCHANTMENTS, ItemEnchantmentsComponent.DEFAULT).add(REPAIR_COST, 0).add(ATTRIBUTE_MODIFIERS, AttributeModifiersComponent.DEFAULT).add(RARITY, Rarity.COMMON).add(BREAK_SOUND, SoundEvents.ENTITY_ITEM_BREAK).add(TOOLTIP_DISPLAY, TooltipDisplayComponent.DEFAULT).build();

    public static ComponentType<?> getDefault(Registry<ComponentType<?>> registry) {
        return CUSTOM_DATA;
    }

    private static <T> ComponentType<T> register(String id, UnaryOperator<ComponentType.Builder<T>> builderOperator) {
        return Registry.register(Registries.DATA_COMPONENT_TYPE, id, ((ComponentType.Builder)builderOperator.apply(ComponentType.builder())).build());
    }
}

